# Creating a program to measure speed from images captured by a Raspberry Pi camera involves multiple steps, including image processing and analysis. Below is a simple Python program using OpenCV to get you started. This program assumes that the camera is mounted in a fixed position and that the objects being tracked are moving horizontally.

import cv2
import time
import numpy as np

# Set up the camera
cap = cv2.VideoCapture(0)  # Use 0 for the default camera
fps = cap.get(cv2.CAP_PROP_FPS)
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

# Parameters for background subtraction
fgbg = cv2.createBackgroundSubtractorMOG2()

# Variables for speed measurement
start_time = time.time()
frame_count = 0
pixels_per_meter = 10  # Adjust based on your setup
speed_list = []

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Preprocess the frame
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    fgmask = fgbg.apply(frame)
    blur = cv2.GaussianBlur(fgmask, (5, 5), 0)

    # Find contours in the frame
    contours, _ = cv2.findContours(blur, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    for contour in contours:
        # Filter out small contours
        if cv2.contourArea(contour) > 1000:
            x, y, w, h = cv2.boundingRect(contour)
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

            # Calculate speed
            speed = w / pixels_per_meter / (time.time() - start_time)
            speed_list.append(speed)

    # Display the frame
    cv2.imshow('Speed Measurement', frame)

    frame_count += 1

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close the window
cap.release()
cv2.destroyAllWindows()

# Calculate average speed
average_speed = np.mean(speed_list)
print(f"Average Speed: {average_speed:.2f} meters per second")

# Calculate average speed
average_speed = np.mean(speed_list)
print(f"Average Speed: {average_speed:.2f} meters per second")

#This program uses background subtraction to detect moving objects in the video stream. The speed of each detected object is calculated based on the width of the bounding box and the assumed pixels per meter ratio. The average speed is then printed after the program is terminated by pressing 'q'.
